---
import crypto from 'crypto';
import BaseLayout from '@layouts/BaseLayout.astro';
import { createSupabaseServerClient } from '@backend/supabaseServerClient';
import { getLangFromUrl, getTranslations } from '@i18n';
import { ImageAnnotationDesktop } from '@apps/annotation-image';
import { TextAnnotationDesktop } from '@apps/annotation-text';
import PlainText from '@apps/annotation-text/content/PlainText.astro';
import { getDocumentInContext } from '@backend/helpers';

const lang = getLangFromUrl(Astro.url);

const supabase = await createSupabaseServerClient(Astro.request, Astro.cookies);
if (!supabase)
  return Astro.redirect(`/${lang}/sign-in`);

const contextId = Astro.params.context;
const documentId = Astro.params.document;

if (!contextId || !documentId) {
  // Should never happen
  const error = await fetch(`${Astro.url}/404`);
  return new Response(error.body, { headers: error.headers, status: 404 }); 
}

// Will return empty if this user has no access priviliges
const response = await getDocumentInContext(supabase, documentId, contextId);

if (!response.data) {
  // https://javascript.plainenglish.io/return-custom-404-responses-in-astro-b844b0e0146d
  const error = await fetch(`${Astro.url}/404`);
  return new Response(error.body, { headers: error.headers, status: 404 }); 
}

const [ document, layers ] = response.data;

if (!document || !layers) {
  // https://javascript.plainenglish.io/return-custom-404-responses-in-astro-b844b0e0146d
  const error = await fetch(`${Astro.url}/500`);
  return new Response(error.body, { headers: error.headers, status: 500 }); 
}

// Compute realtime channel key
const secret = import.meta.env.ROOM_SECRET || '';
const hash = crypto.createHash('sha256');
const data = hash.update(`${secret}.${contextId}.${documentId}`);

const channelId = data.digest('hex');

let viewer;

if (document.content_type === 'text/plain') {
  viewer = 'TEXT';
} else if (document.meta_data?.protocol === 'IIIF_IMAGE') {
  viewer ='OPENSEADRAGON';
} else {
  // Should never happen
  const error = await fetch(`${Astro.url}/500`);
  return new Response(error.body, { headers: error.headers, status: 500 }); 
}
---
<BaseLayout title="Annotation">
  {viewer === 'OPENSEADRAGON' ? (
    <div class="container image">
      <ImageAnnotationDesktop 
        client:only
        i18n={getTranslations(Astro.request, 'annotation-image')}
        document={document}
        layers={layers}
        channelId={channelId} />
    </div>
  ) : (
    <div class="container text">
      <main id="annotatable">
        <PlainText
          document={document} 
          supabase={supabase} />
      </main>

      <TextAnnotationDesktop 
        client:only
        i18n={getTranslations(Astro.request, 'annotation-text')} 
        document={document}
        layers={layers}
        channelId={channelId} />
    </div>
  )}
</BaseLayout>

<style>
  .container.image {
    bottom: 0;
    left: 0;
    overflow: hidden;
    position: absolute;
    right: 0;
    top: 0;
  }

  .container.text {
    display: flex;
    justify-content: center;
  }

  .container.text main {
    background-color: #fff;
    border-color: var(--gray-300);
    border-style: solid;
    border-width: 0 1px;
    font-family: Lora;
    font-size: 17px;
    line-height: 190%;
    padding: 70px 85px 90px 85px;
    width: 70ch;
  }

  .container.text main :global(p) {
    padding: 0.6em 0;
  }
</style>
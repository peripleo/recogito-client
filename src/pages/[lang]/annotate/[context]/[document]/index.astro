---
import crypto from 'crypto';
import BaseLayout from '@layouts/BaseLayout.astro';
import { createSupabaseServerClient } from '@backend/supabaseServerClient';
import { getLangFromUrl, getTranslations } from '@i18n';
import { ImageAnnotation } from '@apps/annotation-image';
import { TextAnnotation } from '@apps/annotation-text';
import { getDocumentInContext } from '@backend/helpers';
import { getCollection } from '@backend/crud/collections';

const lang = getLangFromUrl(Astro.url);

const supabase = await createSupabaseServerClient(Astro.request, Astro.cookies);
if (!supabase) {
  return Astro.redirect(`/${lang}/sign-in?redirect-to=${Astro.url.pathname}`);
}

const contextId = Astro.params.context;
const documentId = Astro.params.document;

if (!contextId || !documentId) {
  // Should never happen
  const error = await fetch(`${Astro.url}/404`);
  return new Response(error.body, { headers: error.headers, status: 404 });
}

// Will return empty if this user has no access priviliges
const document = await getDocumentInContext(supabase, documentId, contextId);
if (document.error || !document.data) {
  // https://javascript.plainenglish.io/return-custom-404-responses-in-astro-b844b0e0146d
  const error = await fetch(`${Astro.url}/404`);
  return new Response(error.body, {
    headers: { 'Content-Type': 'text/html;charset=utf-8' },
    status: 404,
    statusText: 'Not Found',
  });
}

// If the document is part of a collection, see if it has custom css
let styleSheet;

if (document.data.collection_id) {
  // console.info(`Collection found, id: ${document.data.collection_id}`);
  const resp = await getCollection(supabase, document.data.collection_id);
  if (!resp.error && resp.data) {
    styleSheet = resp.data.custom_css;
  }
}

// Compute realtime channel key
const secret = import.meta.env.ROOM_SECRET || '';
const hash = crypto.createHash('sha256');
const data = hash.update(`${secret}.${contextId}.${documentId}`);

const channelId = data.digest('hex');

let viewer;

if (document.data.content_type === 'text/plain') {
  viewer = 'TEXT';
} else if (document.data.content_type === 'text/xml') {
  viewer = 'TEI';
} else if (document.data.content_type === 'application/pdf') {
  viewer = 'PDF';
} else if (document.data.meta_data?.protocol === 'IIIF_IMAGE' || document.data.meta_data?.protocol === 'IIIF_PRESENTATION') {
  viewer = 'OPENSEADRAGON';
} else {
  // Should never happen
  const error = await fetch(`${Astro.url}/500`);
  return new Response(error.body, { headers: error.headers, status: 500 });
}
---
<BaseLayout title={document.data.name}>
  {viewer === 'TEI' && !styleSheet && (
    <link rel="stylesheet" href="/tei.css" slot="head">
  )}

  {viewer === 'OPENSEADRAGON' ? (
    <ImageAnnotation
      client:only
      i18n={getTranslations(Astro.request, 'annotation-image')}
      document={document.data}
      channelId={channelId}
    />
  ) : (
    <TextAnnotation
      client:only
      i18n={getTranslations(Astro.request, 'annotation-text')}
      document={document.data}
      channelId={channelId}
      styleSheet={styleSheet}
    />
  )}
</BaseLayout>

<style>
  html, body {
    height: 100%;
  }
</style>
